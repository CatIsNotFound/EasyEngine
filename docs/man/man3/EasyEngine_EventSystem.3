.TH "EasyEngine::EventSystem" 3 "Version 0.1.1-beta" "Easy Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EasyEngine::EventSystem \- 事件系统  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Core\&.h>\fP
.SS "Public 成员函数"

.in +1c
.ti -1c
.RI "\fBEventSystem\fP (const \fBEventSystem\fP &)=delete"
.br
.ti -1c
.RI "\fBEventSystem\fP \fBoperator=\fP (const \fBEventSystem\fP &)=delete"
.br
.ti -1c
.RI "bool \fBhandler\fP ()"
.br
.RI "事件处理器 "
.ti -1c
.RI "uint64_t \fBaddTimer\fP (\fBEasyEngine::Components::Timer\fP *timer)"
.br
.RI "添加定时器事件 "
.ti -1c
.RI "void \fBreplaceTimer\fP (uint64_t id, \fBEasyEngine::Components::Timer\fP *timer)"
.br
.RI "替换定时器事件 "
.ti -1c
.RI "void \fBremoveTimer\fP (uint64_t id)"
.br
.RI "移除定时器事件 "
.ti -1c
.RI "void \fBclearTimer\fP ()"
.br
.RI "清空所有定时器事件 "
.in -1c
.SS "静态 Public 成员函数"

.in +1c
.ti -1c
.RI "static \fBEventSystem\fP * \fBglobal\fP ()"
.br
.RI "获取全局事件系统 "
.in -1c
.SS "友元"

.in +1c
.ti -1c
.RI "class \fBEngine\fP"
.br
.in -1c
.SH "详细描述"
.PP 
事件系统 
.SH "成员函数说明"
.PP 
.SS "uint64_t EasyEngine::EventSystem::addTimer (\fBEasyEngine::Components::Timer\fP * timer)"

.PP
添加定时器事件 
.PP
\fB参数\fP
.RS 4
\fItimer\fP 指定定时器 
.RE
.PP
\fB参见\fP
.RS 4
\fBreplaceTimer\fP 

.PP
\fBremoveTimer\fP 
.RE
.PP
\fB返回\fP
.RS 4
返回定时器 ID 
.RE
.PP

.SS "bool EasyEngine::EventSystem::handler ()"

.PP
事件处理器 所有事件都将被管理与处理

.PP
\fB返回\fP
.RS 4
返回 true 将持续处理事件，false 将结束处理事件 
.RE
.PP

.SS "void EasyEngine::EventSystem::removeTimer (uint64_t id)"

.PP
移除定时器事件 
.PP
\fB参见\fP
.RS 4
\fBclearTimer\fP 
.RE
.PP

.SS "void EasyEngine::EventSystem::replaceTimer (uint64_t id, \fBEasyEngine::Components::Timer\fP * timer)"

.PP
替换定时器事件 
.PP
\fB参数\fP
.RS 4
\fIid\fP 指定定时器 ID 
.br
\fItimer\fP 新的定时器 
.RE
.PP


.SH "作者"
.PP 
由 Doyxgen 通过分析 Easy Engine 的 源代码自动生成\&.
