.TH "EasyEngine::EventSystem" 3 "Version 1.0.1-beta" "Easy Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EasyEngine::EventSystem \- 事件系统  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Core\&.h>\fP
.SS "Public 成员函数"

.in +1c
.ti -1c
.RI "\fBEventSystem\fP (const \fBEventSystem\fP &)=delete"
.br
.ti -1c
.RI "\fBEventSystem\fP \fBoperator=\fP (const \fBEventSystem\fP &)=delete"
.br
.ti -1c
.RI "void \fBsetHandlerEnabled\fP (bool enabled)"
.br
.RI "设置是否启用全局事件监听 "
.ti -1c
.RI "bool \fBhandlerEnabled\fP () const"
.br
.RI "获取当前是否启用全局事件监听 "
.ti -1c
.RI "bool \fBhandler\fP ()"
.br
.RI "事件处理器 "
.ti -1c
.RI "void \fBcleanUp\fP ()"
.br
.RI "清理所有事件 "
.ti -1c
.RI "uint64_t \fBaddTimer\fP (\fBEasyEngine::Components::Timer\fP *timer)"
.br
.RI "添加定时器事件 "
.ti -1c
.RI "void \fBreplaceTimer\fP (uint64_t id, \fBEasyEngine::Components::Timer\fP *timer)"
.br
.RI "替换定时器事件 "
.ti -1c
.RI "void \fBremoveTimer\fP (uint64_t id)"
.br
.RI "移除定时器事件 "
.ti -1c
.RI "void \fBremoveTimer\fP (\fBEasyEngine::Components::Timer\fP *timer)"
.br
.RI "移除定时器事件 "
.ti -1c
.RI "void \fBclearTimer\fP ()"
.br
.RI "清空所有定时器事件 "
.ti -1c
.RI "uint64_t \fBaddTrigger\fP (\fBEasyEngine::Components::Trigger\fP *trigger)"
.br
.RI "添加触发器 "
.ti -1c
.RI "void \fBreplaceTrigger\fP (uint64_t id, \fBEasyEngine::Components::Trigger\fP *trigger)"
.br
.RI "替换触发器 "
.ti -1c
.RI "void \fBremoveTrigger\fP (uint64_t id)"
.br
.RI "移除触发器 "
.ti -1c
.RI "void \fBclearTrigger\fP ()"
.br
.RI "清空触发器 "
.ti -1c
.RI "uint64_t \fBaddControl\fP (\fBComponents::Control\fP *control)"
.br
.RI "添加控件 "
.ti -1c
.RI "void \fBreplaceControl\fP (uint64_t id, \fBComponents::Control\fP *control)"
.br
.RI "替换控件 "
.ti -1c
.RI "void \fBremoveControl\fP (uint64_t id)"
.br
.RI "移除指定控件 "
.ti -1c
.RI "void \fBclearControls\fP ()"
.br
.RI "清空所有控件 "
.ti -1c
.RI "uint64_t \fBaddSceneManager\fP (\fBEasyEngine::SceneManager\fP *scene_manager)"
.br
.RI "添加场景管理器 "
.ti -1c
.RI "void \fBremoveSceneManager\fP (uint64_t id)"
.br
.RI "移除场景管理器 "
.ti -1c
.RI "void \fBclearSceneManger\fP ()"
.br
.RI "清空场景管理器 "
.in -1c
.SS "静态 Public 成员函数"

.in +1c
.ti -1c
.RI "static \fBEventSystem\fP * \fBglobal\fP ()"
.br
.RI "获取全局事件系统 "
.in -1c
.SS "友元"

.in +1c
.ti -1c
.RI "class \fBEngine\fP"
.br
.in -1c
.SH "详细描述"
.PP 
事件系统 
.SH "成员函数说明"
.PP 
.SS "uint64_t EasyEngine::EventSystem::addControl (\fBComponents::Control\fP * control)"

.PP
添加控件 
.PP
\fB参数\fP
.RS 4
\fIcontrol\fP 指定控件 
.RE
.PP
\fB返回\fP
.RS 4
返回控件 ID 
.RE
.PP
\fB参见\fP
.RS 4
\fBreplaceControl\fP 

.PP
\fBremoveControl\fP 
.RE
.PP

.SS "uint64_t EasyEngine::EventSystem::addSceneManager (\fBEasyEngine::SceneManager\fP * scene_manager)"

.PP
添加场景管理器 
.PP
\fB参数\fP
.RS 4
\fIscene_manager\fP 指定场景管理器 
.RE
.PP
\fB返回\fP
.RS 4
添加成功后，将返回 ID 
.RE
.PP

.SS "uint64_t EasyEngine::EventSystem::addTimer (\fBEasyEngine::Components::Timer\fP * timer)"

.PP
添加定时器事件 
.PP
\fB参数\fP
.RS 4
\fItimer\fP 指定定时器 
.RE
.PP
\fB参见\fP
.RS 4
\fBreplaceTimer\fP 

.PP
\fBremoveTimer\fP 
.RE
.PP
\fB返回\fP
.RS 4
返回定时器 ID 
.RE
.PP

.SS "uint64_t EasyEngine::EventSystem::addTrigger (\fBEasyEngine::Components::Trigger\fP * trigger)"

.PP
添加触发器 
.PP
\fB参数\fP
.RS 4
\fItrigger\fP 指定触发器 
.RE
.PP
\fB返回\fP
.RS 4
返回触发器 ID 
.RE
.PP
\fB参见\fP
.RS 4
\fBreplaceTrigger\fP 

.PP
\fBremoveTrigger\fP 
.RE
.PP

.SS "bool EasyEngine::EventSystem::handler ()"

.PP
事件处理器 所有事件都将被管理与处理

.PP
\fB返回\fP
.RS 4
返回 true 将持续处理事件，false 将结束处理事件 
.RE
.PP

.SS "bool EasyEngine::EventSystem::handlerEnabled () const"

.PP
获取当前是否启用全局事件监听 
.PP
\fB返回值\fP
.RS 4
\fItrue\fP 表示事件系统正在监听所有事件, 
.br
\fIfalse\fP 表示事件系统只监听基础事件、计时器、触发器事件 
.RE
.PP
\fB参见\fP
.RS 4
\fBsetHandlerEnabled\fP 
.RE
.PP

.SS "void EasyEngine::EventSystem::removeControl (uint64_t id)"

.PP
移除指定控件 
.PP
\fB参数\fP
.RS 4
\fIid\fP 指定控件 ID 
.RE
.PP
\fB参见\fP
.RS 4
\fBaddControl\fP 

.PP
\fBreplaceControl\fP 

.PP
\fBclearControls\fP 
.RE
.PP

.SS "void EasyEngine::EventSystem::removeSceneManager (uint64_t id)"

.PP
移除场景管理器 
.PP
\fB参数\fP
.RS 4
\fIid\fP 指定 ID 
.RE
.PP

.SS "void EasyEngine::EventSystem::removeTimer (\fBEasyEngine::Components::Timer\fP * timer)"

.PP
移除定时器事件 
.PP
\fB参数\fP
.RS 4
\fItimer\fP 指定定时器 
.RE
.PP

.SS "void EasyEngine::EventSystem::removeTimer (uint64_t id)"

.PP
移除定时器事件 
.PP
\fB参见\fP
.RS 4
\fBclearTimer\fP 
.RE
.PP

.SS "void EasyEngine::EventSystem::removeTrigger (uint64_t id)"

.PP
移除触发器 
.PP
\fB参数\fP
.RS 4
\fIid\fP 指定触发器 ID 
.RE
.PP
\fB注解\fP
.RS 4
原有的触发器将被释放 
.RE
.PP
\fB参见\fP
.RS 4
\fBaddTrigger\fP 

.PP
\fBreplaceTrigger\fP 
.RE
.PP

.SS "void EasyEngine::EventSystem::replaceControl (uint64_t id, \fBComponents::Control\fP * control)"

.PP
替换控件 
.PP
\fB参数\fP
.RS 4
\fIid\fP 指定控件 ID 
.br
\fIcontrol\fP 指定新的控件 
.RE
.PP
\fB参见\fP
.RS 4
\fBaddControl\fP 
.RE
.PP

.SS "void EasyEngine::EventSystem::replaceTimer (uint64_t id, \fBEasyEngine::Components::Timer\fP * timer)"

.PP
替换定时器事件 
.PP
\fB参数\fP
.RS 4
\fIid\fP 指定定时器 ID 
.br
\fItimer\fP 新的定时器 
.RE
.PP
\fB注解\fP
.RS 4
原先被替换的定时器将被释放 
.RE
.PP

.SS "void EasyEngine::EventSystem::replaceTrigger (uint64_t id, \fBEasyEngine::Components::Trigger\fP * trigger)"

.PP
替换触发器 
.PP
\fB参数\fP
.RS 4
\fIid\fP 触发器 ID 
.br
\fItrigger\fP 指定触发器 
.RE
.PP
\fB注解\fP
.RS 4
原先被替换的触发器将被释放！ 
.RE
.PP
\fB参见\fP
.RS 4
\fBaddTrigger\fP 
.RE
.PP

.SS "void EasyEngine::EventSystem::setHandlerEnabled (bool enabled)"

.PP
设置是否启用全局事件监听 
.PP
\fB参数\fP
.RS 4
\fIenabled\fP 启用/禁用全局事件监听
.RE
.PP
当 \fRenabled\fP 为 \fRfalse\fP 时，除了基本的事件处理以及计时器、触发器以外， 其它事件（如：自定义事件处理、控件处理）都将被忽略。一般情况下，当场景正在切换时会禁用全局事件监听。 
.PP
\fB参见\fP
.RS 4
\fBhandlerEnabled\fP 
.RE
.PP


.SH "作者"
.PP 
由 Doyxgen 通过分析 Easy Engine 的 源代码自动生成\&.
