.TH "EasyEngine::Painter" 3 "Version 1.0.1-beta" "Easy Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EasyEngine::Painter \- 图形绘制器  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Core\&.h>\fP
.SS "Public 成员函数"

.in +1c
.ti -1c
.RI "\fBPainter\fP (\fBEasyEngine::Window\fP *\fBwindow\fP)"
.br
.RI "指定窗口以获取渲染器 "
.ti -1c
.RI "const \fBWindow\fP * \fBwindow\fP () const"
.br
.RI "获取当前绘制的窗口 "
.ti -1c
.RI "void \fBsetThickness\fP (uint16_t value)"
.br
.RI "设置绘制时的粗细程度 "
.ti -1c
.RI "uint16_t \fBthickness\fP () const"
.br
.RI "获取绘制时的粗细程度 "
.ti -1c
.RI "void \fBinstallPaintEvent\fP (std::function< void(\fBPainter\fP &)> function)"
.br
.RI "安装自定义绘图事件 "
.ti -1c
.RI "void \fBsetSceneManager\fP (\fBSceneManager\fP *sceneManager)"
.br
.RI "设置场景管理器以做到实时渲染 "
.ti -1c
.RI "void \fB______\fP ()"
.br
.RI "渲染/刷新画面 "
.ti -1c
.RI "void \fBfillBackColor\fP (const SColor &color)"
.br
.RI "填充背景颜色 "
.ti -1c
.RI "void \fBdrawPoint\fP (const \fBGraphics::Point\fP &point)"
.br
.RI "绘制点 "
.ti -1c
.RI "void \fBdrawLine\fP (const \fBGraphics::Line\fP &line)"
.br
.RI "绘制线段 "
.ti -1c
.RI "void \fBdrawRectangle\fP (const \fBGraphics::Rectangle\fP &rect)"
.br
.RI "绘制矩形 "
.ti -1c
.RI "void \fBdrawEllipse\fP (const \fBGraphics::Ellipse\fP &ellipse)"
.br
.RI "绘制椭圆 "
.ti -1c
.RI "void \fBdrawSprite\fP (const \fBComponents::Sprite\fP &sprite, const \fBVector2\fP &pos)"
.br
.RI "绘制精灵 "
.ti -1c
.RI "void \fBdrawSprite\fP (const \fBComponents::Sprite\fP &sprite, const \fBComponents::Sprite::Properties\fP &properties)"
.br
.RI "根据精灵属性绘制精灵 "
.ti -1c
.RI "void \fBdrawSprite\fP (const \fBComponents::Sprite\fP &sprite, const \fBComponents::Sprite::Properties\fP *properties)"
.br
.ti -1c
.RI "void \fBdrawPixelText\fP (const std::string &text, const \fBVector2\fP &pos, const \fBSize\fP &size={1\&.0f, 1\&.0f}, const SColor &color=StdColor::White)"
.br
.RI "绘制像素文本 "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "清空所有绘制命令 "
.ti -1c
.RI "void \fBsetViewport\fP (const \fBGeometry\fP &geometry, const \fBSize\fP &size={1\&.0f, 1\&.0f})"
.br
.RI "设置自定义视图 "
.ti -1c
.RI "void \fBsetClipView\fP (const \fBGeometry\fP &geometry)"
.br
.RI "裁剪可见视图 "
.ti -1c
.RI "bool \fB_addTransition\fP (\fBTransition\fP *transition)"
.br
.ti -1c
.RI "bool \fB_removeTransition\fP (\fBTransition\fP *transition)"
.br
.ti -1c
.RI "bool \fB_startTransition\fP (\fBTransition\fP *transition)"
.br
.ti -1c
.RI "bool \fB_stopTransition\fP (\fBTransition\fP *transition)"
.br
.in -1c
.SS "友元"

.in +1c
.ti -1c
.RI "class \fBComponents::Sprite\fP"
.br
.in -1c
.SH "详细描述"
.PP 
图形绘制器 

针对单个窗口使用图形绘制器，决定了如何绘制画面 
.SH "构造及析构函数说明"
.PP 
.SS "EasyEngine::Painter::Painter (\fBEasyEngine::Window\fP * window)\fR [explicit]\fP"

.PP
指定窗口以获取渲染器 
.PP
\fB参数\fP
.RS 4
\fIwindow\fP 指定的窗口 
.RE
.PP

.SH "成员函数说明"
.PP 
.SS "void EasyEngine::Painter::______ ()"

.PP
渲染/刷新画面 
.PP
\fB警告\fP
.RS 4
请勿手动使用此函数，会出现异常退出！ 
.RE
.PP

.SS "void EasyEngine::Painter::drawEllipse (const \fBGraphics::Ellipse\fP & ellipse)"

.PP
绘制椭圆 
.PP
\fB参数\fP
.RS 4
\fIellipse\fP 椭圆 
.RE
.PP

.SS "void EasyEngine::Painter::drawLine (const \fBGraphics::Line\fP & line)"

.PP
绘制线段 
.PP
\fB参数\fP
.RS 4
\fIline\fP 线段 
.RE
.PP

.SS "void EasyEngine::Painter::drawPixelText (const std::string & text, const \fBVector2\fP & pos, const \fBSize\fP & size = \fR{1\&.0f, 1\&.0f}\fP, const SColor & color = \fRStdColor::White\fP)"

.PP
绘制像素文本 
.PP
\fB参数\fP
.RS 4
\fItext\fP 指定文本内容（仅支持 ASCII 字符） 
.br
\fIpos\fP 指定绘制的位置 
.br
\fIsize\fP 指定绘制的尺寸比例（默认 1:1） 
.br
\fIcolor\fP 指定绘制的颜色（默认白色） 
.RE
.PP

.SS "void EasyEngine::Painter::drawPoint (const \fBGraphics::Point\fP & point)"

.PP
绘制点 
.PP
\fB参数\fP
.RS 4
\fIpoint\fP 点 
.RE
.PP

.SS "void EasyEngine::Painter::drawRectangle (const \fBGraphics::Rectangle\fP & rect)"

.PP
绘制矩形 
.PP
\fB参数\fP
.RS 4
\fIrect\fP 矩形 
.RE
.PP

.SS "void EasyEngine::Painter::drawSprite (const \fBComponents::Sprite\fP & sprite, const \fBComponents::Sprite::Properties\fP & properties)"

.PP
根据精灵属性绘制精灵 
.PP
\fB参数\fP
.RS 4
\fIsprite\fP 指定精灵 
.br
\fIproperties\fP 精灵属性 
.RE
.PP
\fB参见\fP
.RS 4
Spirit 

.PP
Properties 
.RE
.PP

.SS "void EasyEngine::Painter::drawSprite (const \fBComponents::Sprite\fP & sprite, const \fBVector2\fP & pos)"

.PP
绘制精灵 
.PP
\fB参数\fP
.RS 4
\fIsprite\fP 精灵 
.br
\fIpos\fP 绘制位置 
.RE
.PP
\fB参见\fP
.RS 4
Spirit 
.RE
.PP

.SS "void EasyEngine::Painter::fillBackColor (const SColor & color)"

.PP
填充背景颜色 
.PP
\fB参数\fP
.RS 4
\fIcolor\fP 指定颜色 
.RE
.PP
\fB参见\fP
.RS 4
\fBStdColor\fP 

.PP
hexToRGBA 
.RE
.PP

.SS "void EasyEngine::Painter::installPaintEvent (std::function< void(\fBPainter\fP &)> function)"

.PP
安装自定义绘图事件 
.PP
\fB参数\fP
.RS 4
\fIfunction\fP 自定义绘图函数 
.RE
.PP

.SS "void EasyEngine::Painter::setClipView (const \fBGeometry\fP & geometry)"

.PP
裁剪可见视图 
.PP
\fB参数\fP
.RS 4
\fIgeometry\fP 用于调整裁剪可见视图的位置、大小 
.RE
.PP
\fB注解\fP
.RS 4
当指定的宽度或高度小于等于 0，则取消使用裁剪！ 
.RE
.PP

.SS "void EasyEngine::Painter::setSceneManager (\fBEasyEngine::SceneManager\fP * sceneManager)"

.PP
设置场景管理器以做到实时渲染 
.PP
\fB参数\fP
.RS 4
\fIsceneManager\fP 指定场景管理器 
.RE
.PP

.SS "void EasyEngine::Painter::setThickness (uint16_t value)"

.PP
设置绘制时的粗细程度 
.PP
\fB参数\fP
.RS 4
\fIvalue\fP 新的粗细值，值越小越细
.RE
.PP
\fB注解\fP
.RS 4
决定了绘制点、线段、边框时的粗细程度 
.RE
.PP
\fB参见\fP
.RS 4
\fBthickness\fP 
.RE
.PP

.SS "void EasyEngine::Painter::setViewport (const \fBGeometry\fP & geometry, const \fBSize\fP & size = \fR{1\&.0f, 1\&.0f}\fP)"

.PP
设置自定义视图 
.PP
\fB参数\fP
.RS 4
\fIgeometry\fP 用于调整视图的位置、大小 
.br
\fIsize\fP 用于调整视图的缩放比例（默认使用 1:1）
.RE
.PP
执行后，整个位置及大小都将发生改变！ 
.PP
\fB注解\fP
.RS 4
当指定的宽度或高度小于等于 0，则取消使用自定义视图 
.RE
.PP

.SS "uint16_t EasyEngine::Painter::thickness () const"

.PP
获取绘制时的粗细程度 
.PP
\fB返回\fP
.RS 4
返回当前粗细值 
.RE
.PP

.SS "const \fBEasyEngine::Window\fP * EasyEngine::Painter::window () const"

.PP
获取当前绘制的窗口 
.PP
\fB返回\fP
.RS 4
返回绘制窗口 
.RE
.PP


.SH "作者"
.PP 
由 Doyxgen 通过分析 Easy Engine 的 源代码自动生成\&.
