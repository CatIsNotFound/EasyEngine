.TH "EasyEngine::Components::Timer" 3 "Version 1.1.0-alpha" "Easy Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EasyEngine::Components::Timer \- 定时器  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Components\&.h>\fP
.SS "Public 成员函数"

.in +1c
.ti -1c
.RI "\fBTimer\fP ()"
.br
.RI "创建定时器 "
.ti -1c
.RI "\fBTimer\fP (uint64_t \fBdelay\fP, const std::function< void()> &function)"
.br
.RI "创建定时器 "
.ti -1c
.RI "void \fBsetDelay\fP (uint64_t \fBdelay\fP)"
.br
.RI "设定定时器触发延迟 "
.ti -1c
.RI "void \fBsetEvent\fP (const std::function< void()> &function)"
.br
.RI "设置或替换定时器触发事件 "
.ti -1c
.RI "void \fBstart\fP (bool \fBloop\fP=false)"
.br
.RI "启用定时器 "
.ti -1c
.RI "void \fBstop\fP ()"
.br
.RI "禁用定时器 "
.ti -1c
.RI "bool \fBenabled\fP () const"
.br
.RI "返回是否启用计时器 "
.ti -1c
.RI "bool \fBloop\fP () const"
.br
.RI "返回是否正在循环使用计时器 "
.ti -1c
.RI "uint64_t \fBdelay\fP () const"
.br
.RI "获取触发延迟时长 "
.ti -1c
.RI "void \fB______\fP ()"
.br
.RI "更新定时器状态（无需手动调用） "
.ti -1c
.RI "size_t \fBcount\fP () const"
.br
.RI "获取触发定时器的总次数 "
.ti -1c
.RI "void \fBclearCount\fP ()"
.br
.RI "清零定时器触发总次数 "
.in -1c
.SS "友元"

.in +1c
.ti -1c
.RI "class \fBEventSystem\fP"
.br
.in -1c
.SH "详细描述"
.PP 
定时器 

用于定时触发事件的组件。 
.PP
\fB注解\fP
.RS 4
此组件只能以指针的形式使用 
.RE
.PP

.SH "构造及析构函数说明"
.PP 
.SS "EasyEngine::Components::Timer::Timer ()\fR [explicit]\fP"

.PP
创建定时器 
.PP
\fB注解\fP
.RS 4
这里只能使用指针的形式创建！ 
.PP
.nf
Timer* timer = new Timer();
timer\->setDelay(1000);   // 1000ms = 1sec
timer\->setEnterSceneEvent(your_function);
timer\->start();
// delete timer; // 调用 start() 函数后，不能释放此指针！

.fi
.PP
 
.RE
.PP
\fB参见\fP
.RS 4
\fBsetDelay\fP 

.PP
setEnterSceneEvent 

.PP
\fBstart\fP 
.RE
.PP

.SS "EasyEngine::Components::Timer::Timer (uint64_t delay, const std::function< void()> & function)"

.PP
创建定时器 
.PP
\fB参数\fP
.RS 4
\fIdelay\fP 设定触发延迟（毫秒） 
.br
\fIfunction\fP 触发事件 
.RE
.PP
\fB注解\fP
.RS 4
这里只能使用指针的形式创建！ 
.RE
.PP
\fB参见\fP
.RS 4
\fBstart\fP 
.RE
.PP

.SH "成员函数说明"
.PP 
.SS "void EasyEngine::Components::Timer::clearCount ()"

.PP
清零定时器触发总次数 
.PP
\fB参见\fP
.RS 4
\fBcount\fP 
.RE
.PP

.SS "size_t EasyEngine::Components::Timer::count () const"

.PP
获取触发定时器的总次数 
.PP
\fB参见\fP
.RS 4
\fBclearCount\fP 
.RE
.PP

.SS "uint64_t EasyEngine::Components::Timer::delay () const"

.PP
获取触发延迟时长 
.PP
\fB参见\fP
.RS 4
\fBsetDelay\fP 
.RE
.PP

.SS "void EasyEngine::Components::Timer::setDelay (uint64_t delay)"

.PP
设定定时器触发延迟 
.PP
\fB参数\fP
.RS 4
\fIdelay\fP 指定延迟（毫秒） 
.RE
.PP
\fB参见\fP
.RS 4
setEnterSceneEvent 

.PP
\fBstart\fP 
.RE
.PP

.SS "void EasyEngine::Components::Timer::setEvent (const std::function< void()> & function)"

.PP
设置或替换定时器触发事件 
.PP
\fB参数\fP
.RS 4
\fIfunction\fP 指定触发事件 
.RE
.PP
\fB参见\fP
.RS 4
\fBsetDelay\fP 

.PP
\fBstart\fP 
.RE
.PP

.SS "void EasyEngine::Components::Timer::start (bool loop = \fRfalse\fP)"

.PP
启用定时器 
.PP
\fB参数\fP
.RS 4
\fIloop\fP 是否循环启用定时器（之前的事件触发后将再次启用） 
.RE
.PP
\fB参见\fP
.RS 4
\fBstop\fP 

.PP
\fBenabled\fP 

.PP
\fBloop\fP 

.PP
\fBcount\fP 
.RE
.PP

.SS "void EasyEngine::Components::Timer::stop ()"

.PP
禁用定时器 
.PP
\fB参见\fP
.RS 4
\fBstart\fP 

.PP
\fBenabled\fP 
.RE
.PP


.SH "作者"
.PP 
由 Doyxgen 通过分析 Easy Engine 的 源代码自动生成\&.
